#!/bin/bash

usage_exit() {
    echo "Usage: $0 [--dir] SET dir1 ... " 1>&2
    exit 1
}

while getopts ":dh-:" opt; do
    case "$opt" in
        -)
            case "${OPTARG}" in
                help)
                    usage_exit
                    ;;
                dir)
                    FLAG_DIR=1
                    ;;
                csv)
                    FLAG_CSV=1
                    ;;
                *)
                    usage_exit
                    ;;
            esac
            ;;
        d)
            FLAG_DIR=1
            ;;
        h)
            usage_exit
            ;;
    esac
done
shift $((OPTIND - 1))


cloc_custom(){
    # echo cloc_custom parent_dir:$1 tree_hash:$2 1>&2
    opt=" "
    if [ $FLAG_CSV ]; then
        opt="$opt --csv"
        cloc --git --quiet --timeout=60 $opt $2 | \
        tail +3 | \
        sed "s@^@$1,@"
    else
        # echo directory name before cloc
        echo "$1"
        cloc --git --quiet --timeout=60 $opt $2 | \
        tail +3
    fi
}


git_ls_tree_dir(){
    tree_hash=$1
    git ls-tree -d $tree_hash | awk '{print $4, $3}'| sort -k1,1
}

cloc_dirs(){
    # echo "cloc_dirs parent_dir:$1 three_hash:$2 dir:$3" 1>&2
    pdir=$1
    tree_hash=$2
    dir=$3

    # if dir="a/b/c/d/e" => current=a, next=b/c/d/e"
    current=${dir%%/*}
    next=${dir#*/}
    if [ $current == $dir ]; then
        next=""
    fi
    
    # echo ">>> current=$current, next=$next" 1>&2
    # cloc_dirs recursively and do "cloc"
    if [ "$next" = "" ];then
        if [ $FLAG_DIR ]; then
            git_ls_tree_dir $tree_hash | \
            while read d h
            do
                cloc_custom "$1/$d" $h
            done
        else
            cloc_custom "$pdir" $tree_hash
        fi
    else
        next_dir=${next%%/*}
        # echo ">>> change directory to $next_dir with dir=$next " 1>&2
        git_ls_tree_dir $tree_hash | grep -F $next_dir  | \
        while read d h
        do  
            cloc_dirs "$pdir/$d" $h $next
        done
    fi
}

if [ $FLAG_CSV ]; then
# heading line
    echo "dir, files, language, blank, comment, code"
fi

# base directory name for exploring
pwd_dir=`pwd`
base_dir=`basename $pwd_dir`

base_hash=$1
for d in ${@:2}; do
    # get a formatted relative path by realpath
    # e.g.
    # $ cd ./src
    # $ realpath --relative-to=.. ./gpu/./vulkan/././././win32 
    # src/gpu/vulkan/win32
    dir=`realpath --relative-to=.. $d`
    cloc_dirs $base_dir $base_hash $dir
done


