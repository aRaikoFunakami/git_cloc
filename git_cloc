#!/bin/bash

usage_exit() {
    echo "Usage: $0 [--dir] SET dir1 ... " 1>&2
    exit 1
}

while getopts ":dh-:" opt; do
    case "$opt" in
        -)
            case "${OPTARG}" in
                help)
                    usage_exit
                    ;;
                dir)
                    FLAG_DIR=1
                    ;;
                csv)
                    FLAG_CSV=1
                    ;;
                *)
                    usage_exit
                    ;;
            esac
            ;;
        d)
            FLAG_DIR=1
            ;;
        h)
            usage_exit
            ;;
    esac
done
shift $((OPTIND - 1))


cloc_custom(){
    # echo cloc_custom parent_dir:$1 tree_hash:$2 1>&2
    opt=" "
    if [ $FLAG_CSV ]; then
        opt="$opt --csv"
        cloc --git --quiet --timeout=60 $opt $2 | \
        tail +3 | \
        sed "s@^@$1,@"
    else
        # echo directory name before cloc
        echo "$1"
        cloc --git --quiet --timeout=60 $opt $2
    fi
}

cloc_subdirs(){
    # echo cloc_subdirs parent_dir:$1 dir:2 1>&2
    # tmp file setup
    tmp_subtree=$(mktemp)

    function rm_tmpfiles {
    [[ -f "$tmp_subtree" ]] && rm -f "$tmp_subtree"
    }
    trap rm_tmpfiles EXIT

    # table of directory name and hash 
    git ls-tree -d $2 | awk '{print $4, $3}'| sort -k1,1 > $tmp_subtree

    # applying "cloc" command to directories
    cat $tmp_subtree | \
    while read d h
    do  
        cloc_custom "$1/$d" $h
    done
}


cloc_dirs(){
    # echo cloc_dirs parent_dir:$1 three_hash:$2 dirs:${@:3} 1>&2
    bdir=$1
    tree_hash=$2
    dirs=${@:3}

    # tmp file setup
    tmp_subtree=$(mktemp)

    function rm_tmpfiles {
    [[ -f "$tmp_subtree" ]] && rm -f "$tmp_subtree"
    }
    trap rm_tmpfiles EXIT

    # table of directory name and hash 
    git ls-tree -d $tree_hash | awk '{print $4, $3}'| sort -k1,1 > $tmp_subtree

    for dir in $dirs; do
        # remove "^./", "^/", and "/$"
        dir=`echo $dir | sed 's@^\./@@g' | sed 's@^/@@g' | sed 's@/$@@g'`

        if [ $dir = "." ]; then
            cloc_custom $bdir $tree_hash
        else
            # if dir="a/b/c/d/e" => current=a, next=b/c/d/e"
            current=${dir%%/*}
            next=${dir#*/}
            if [ $current == $dir ]; then
                next=""
            fi
            # get "current" directory hash, and ...
            grep -F $current $tmp_subtree | \
            while read d h
            do  
                if [ "$next" = "" ]; then
                    if [ $FLAG_DIR ]; then
                        cloc_subdirs "$bdir/$d" $h
                    else
                        cloc_custom "$bdir/$d" $h
                    fi
                else
                    cloc_dirs "$bdir/$d" $h $next
                fi
            done
        fi
    done
}

if [ $FLAG_CSV ]; then
# heading line
    echo "dir, files, language, blank, comment, code"
fi

# base directory name for exploring
base_dir=`pwd`
base_dir=`basename $base_dir`

cloc_dirs $base_dir $@


